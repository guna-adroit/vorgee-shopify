{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  
  .ai-breadcrumb-{{ ai_gen_id }} {
    padding: 50px 0px;
    background-color: {{ block.settings.background_color }};
    border-bottom: {{ block.settings.border_width }}px solid {{ block.settings.border_color }};
  }

  .ai-breadcrumb-nav-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: {{ block.settings.spacing }}px;
    line-height: 1.4;
  }

  .ai-breadcrumb-item-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    gap: {{ block.settings.spacing }}px;
  }

  .ai-breadcrumb-link-{{ ai_gen_id }} {
    font-weight: 300;
    font-size: 16px;
    line-height: 150%;
    color: #121212;
  }

  .ai-breadcrumb-link-{{ ai_gen_id }}:hover {
    color: {{ block.settings.link_hover_color }};
    text-decoration: underline;
  }

  .ai-breadcrumb-current-{{ ai_gen_id }} {
    font-weight: 300;
    font-size: 16px;
    line-height: 150%;
    color: #121212;
  }

  .ai-breadcrumb-separator-{{ ai_gen_id }} {
    color: {{ block.settings.separator_color }};
    font-size: {{ block.settings.font_size | times: 0.9 }}px;
    user-select: none;
  }

  @media screen and (max-width: 786px) {
    .ai-breadcrumb-{{ ai_gen_id }} {
      padding: 20px 0;
    }

    .ai-breadcrumb-nav-{{ ai_gen_id }} {
      gap: {{ block.settings.spacing | times: 0.8 }}px;
    }

    .ai-breadcrumb-item-{{ ai_gen_id }} {
      gap: {{ block.settings.spacing | times: 0.8 }}px;
    }
    .ai-breadcrumb-current-{{ ai_gen_id }} {
      font-weight: 300;
      font-size: 14px;
      line-height: 150%;
      color: #121212;
    }
    .ai-breadcrumb-link-{{ ai_gen_id }} {
      font-weight: 300;
      font-size: 14px;
      line-height: 150%;
      color: #121212;
    }
  }
{% endstyle %}

<style>
  {% if template.name == 'collection' or template.name == 'list-collections' or template.name == 'index' %}
    .ai-breadcrumb-{{ ai_gen_id }}{
       display: none !important;
    }
  {% endif %}
</style>

<breadcrumb-navigation-{{ ai_gen_id }}
  class="ai-breadcrumb-{{ ai_gen_id }} section section--page-width"
  data-current-url="{{ request.url }}"
  {{ block.shopify_attributes }}
>
  <nav class="ai-breadcrumb-nav-{{ ai_gen_id }}" aria-label="Breadcrumb navigation">
    <div class="ai-breadcrumb-item-{{ ai_gen_id }}">
      <a href="{{ routes.root_url }}" class="ai-breadcrumb-link-{{ ai_gen_id }}">
        {{ block.settings.home_text }}
      </a>
    </div>

    {% liquid
      assign referrer_collection = null
      assign current_collection = null
      
      if request.headers['Referer'] and request.headers['Referer'] contains shop.permanent_domain
        assign referer_url = request.headers['Referer']
        assign referer_path = referer_url | split: shop.permanent_domain | last | split: '?' | first
        
        if referer_path contains '/collections/'
          assign collection_handle = referer_path | split: '/collections/' | last | split: '/' | first
          assign referrer_collection = collections[collection_handle]
        endif
      endif
      
      if referrer_collection
        assign current_collection = referrer_collection
      elsif collection
        assign current_collection = collection
      elsif product and product.collections.size > 0
        assign current_collection = product.collections.first
      endif
    %}

    {% if current_collection %}
      <span class="ai-breadcrumb-separator-{{ ai_gen_id }}" aria-hidden="true">
        {{ block.settings.separator }}
      </span>
      <div class="ai-breadcrumb-item-{{ ai_gen_id }}">
        <a href="{{ current_collection.url }}" class="ai-breadcrumb-link-{{ ai_gen_id }}">
          {{ current_collection.title }}
        </a>
      </div>
    {% endif %}

    {% if product %}
      <span class="ai-breadcrumb-separator-{{ ai_gen_id }}" aria-hidden="true">
        {{ block.settings.separator }}
      </span>
      <div class="ai-breadcrumb-item-{{ ai_gen_id }}">
        <span class="ai-breadcrumb-current-{{ ai_gen_id }}" aria-current="page">
          {{ product.title }}
        </span>
      </div>
    {% elsif collection %}
      <span class="ai-breadcrumb-separator-{{ ai_gen_id }}" aria-hidden="true">
        {{ block.settings.separator }}
      </span>
      <div class="ai-breadcrumb-item-{{ ai_gen_id }}">
        <span class="ai-breadcrumb-current-{{ ai_gen_id }}" aria-current="page">
          {{ collection.title }}
        </span>
      </div>
    {% elsif page %}
      <span class="ai-breadcrumb-separator-{{ ai_gen_id }}" aria-hidden="true">
        {{ block.settings.separator }}
      </span>
      <div class="ai-breadcrumb-item-{{ ai_gen_id }}">
        <span class="ai-breadcrumb-current-{{ ai_gen_id }}" aria-current="page">
          {{ page.title }}
        </span>
      </div>
    {% elsif blog %}
      <span class="ai-breadcrumb-separator-{{ ai_gen_id }}" aria-hidden="true">
        {{ block.settings.separator }}
      </span>
      <div class="ai-breadcrumb-item-{{ ai_gen_id }}">
        <span class="ai-breadcrumb-current-{{ ai_gen_id }}" aria-current="page">
          {{ blog.title }}
        </span>
      </div>
    {% elsif template.name == 'cart' %}
      <span class="ai-breadcrumb-separator-{{ ai_gen_id }}" aria-hidden="true">
        {{ block.settings.separator }}
      </span>
      <div class="ai-breadcrumb-item-{{ ai_gen_id }}">
        <span class="ai-breadcrumb-current-{{ ai_gen_id }}" aria-current="page">
          Cart
        </span>
      </div>
    {% elsif template.name == 'search' %}
      <span class="ai-breadcrumb-separator-{{ ai_gen_id }}" aria-hidden="true">
        {{ block.settings.separator }}
      </span>
      <div class="ai-breadcrumb-item-{{ ai_gen_id }}">
        <span class="ai-breadcrumb-current-{{ ai_gen_id }}" aria-current="page">
          Search
        </span>
      </div>

    {% elsif request.page_type contains 'policy' %}
      {% if request.path contains 'terms-of-service' %} 
        {{ shop.terms_of_service.title }} 
      {% endif %}
    {% elsif article %}
      {% if blog %}
        <span class="ai-breadcrumb-separator-{{ ai_gen_id }}" aria-hidden="true">
          {{ block.settings.separator }}
        </span>
        <div class="ai-breadcrumb-item-{{ ai_gen_id }}"><a href="{{ blog.url }}" class="ai-breadcrumb-link-{{ ai_gen_id }}">
            {{ blog.title }}
          </a>
        </div>
      {% endif %}
      <span class="ai-breadcrumb-separator-{{ ai_gen_id }}" aria-hidden="true">
        {{ block.settings.separator }}
      </span>
      <div class="ai-breadcrumb-item-{{ ai_gen_id }}">
        <span class="ai-breadcrumb-current-{{ ai_gen_id }}" aria-current="page">
          {{ article.title }}
        </span>
      </div>
    {% endif %}
  </nav>
</breadcrumb-navigation-{{ ai_gen_id }}>

<script>
  (function() {
    class BreadcrumbNavigation{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.enhanceAccessibility();
        this.trackAndUpdateBreadcrumb();
      }

      enhanceAccessibility() {
        const links = this.querySelectorAll('.ai-breadcrumb-link-{{ ai_gen_id }}');
        links.forEach((link, index) => {
          if (index === 0) {
            link.setAttribute('aria-label', 'Go to homepage');
          } else {
            const text = link.textContent.trim();
            link.setAttribute('aria-label', `Go to ${text}`);
          }
        });
      }

      trackAndUpdateBreadcrumb() {
        if (typeof sessionStorage === 'undefined') return;

        try {
          const currentUrl = window.location.href;
          const currentPath = window.location.pathname;
          const referrer = document.referrer;
          
          if (referrer && referrer.includes(window.location.hostname)) {
            const referrerPath = new URL(referrer).pathname;
            
            if (referrerPath.includes('/collections/') && currentPath.includes('/products/')) {
              const collectionHandle = referrerPath.split('/collections/')[1].split('/')[0].split('?')[0];
              
              sessionStorage.setItem('breadcrumb_collection_context', JSON.stringify({
                handle: collectionHandle,
                referrer: referrer,
                timestamp: Date.now()
              }));
              
              this.updateCollectionBreadcrumb(collectionHandle);
            }
          }
          
          const storedContext = sessionStorage.getItem('breadcrumb_collection_context');
          if (storedContext && currentPath.includes('/products/')) {
            const context = JSON.parse(storedContext);
            const timeDiff = Date.now() - context.timestamp;
            
            if (timeDiff < 300000) {
              this.updateCollectionBreadcrumb(context.handle);
            } else {
              sessionStorage.removeItem('breadcrumb_collection_context');
            }
          }
          
        } catch (e) {
          console.warn('Unable to track breadcrumb context:', e);
        }
      }

      updateCollectionBreadcrumb(collectionHandle) {
        if (!collectionHandle) return;

        fetch(`/collections/${collectionHandle}.json`)
          .then(response => response.json())
          .then(data => {
            const collectionLink = this.querySelector('.ai-breadcrumb-link-{{ ai_gen_id }}[href*="/collections/"]');
            if (collectionLink && data.collection) {
              collectionLink.textContent = data.collection.title;
              collectionLink.href = `/collections/${collectionHandle}`;
              collectionLink.setAttribute('aria-label', `Go to ${data.collection.title}`);
            }
          })
          .catch(e => {
            console.warn('Unable to fetch collection data:', e);
          });
      }
    }

    customElements.define('breadcrumb-navigation-{{ ai_gen_id }}', BreadcrumbNavigation{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Breadcrumb navigation",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "home_text",
      "label": "Home text",
      "default": "Home"
    },
    {
      "type": "text",
      "id": "separator",
      "label": "Separator",
      "default": "/"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "link_color",
      "label": "Link color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "link_hover_color",
      "label": "Link hover color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "current_color",
      "label": "Current page color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "separator_color",
      "label": "Separator color",
      "default": "#cccccc"
    },
    {
      "type": "select",
      "id": "current_font_weight",
      "label": "Current page font weight",
      "options": [
        {
          "value": "400",
          "label": "Normal"
        },
        {
          "value": "500",
          "label": "Medium"
        },
        {
          "value": "600",
          "label": "Semi-bold"
        },
        {
          "value": "700",
          "label": "Bold"
        }
      ],
      "default": "500"
    },
    {
      "type": "range",
      "id": "font_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Font size",
      "default": 14
    },
    {
      "type": "header",
      "content": "Spacing"
    },
    {
      "type": "range",
      "id": "spacing",
      "min": 4,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Item spacing",
      "default": 8
    },
    {
      "type": "range",
      "id": "padding_vertical",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Vertical padding",
      "default": 12
    },
    {
      "type": "range",
      "id": "padding_horizontal",
      "min": 0,
      "max": 60,
      "step": 4,
      "unit": "px",
      "label": "Horizontal padding",
      "default": 20
    },
    {
      "type": "header",
      "content": "Border"
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 4,
      "step": 1,
      "unit": "px",
      "label": "Border width",
      "default": 1
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#e6e6e6"
    }
  ],
  "presets": [
    {
      "name": "breadcrumbs"
    }
  ]
}
{% endschema %}