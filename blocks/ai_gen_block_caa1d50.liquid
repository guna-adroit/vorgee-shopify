{% doc %}
  @prompt
    I need to implement breadcrumbs on the PDP (Product Detail Page), and the key requirement is that it should reflect the full navigation path the customer took. For example, if a user navigates from a collection page to a product, the breadcrumb should follow the format:
    Home / [Collection Name] / [Product Name].

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-breadcrumbs-{{ ai_gen_id }} {
    padding: {{ block.settings.padding_top }}px 0 {{ block.settings.padding_bottom }}px;
    font-size: {{ block.settings.font_size }}px;
    color: {{ block.settings.text_color }};
  }

  .ai-breadcrumbs-list-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: {{ block.settings.spacing }}px;
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .ai-breadcrumbs-item-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    gap: {{ block.settings.spacing }}px;
  }

  .ai-breadcrumbs-link-{{ ai_gen_id }} {
    color: {{ block.settings.link_color }};
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .ai-breadcrumbs-link-{{ ai_gen_id }}:hover {
    color: {{ block.settings.link_hover_color }};
    text-decoration: underline;
  }

  .ai-breadcrumbs-current-{{ ai_gen_id }} {
    color: {{ block.settings.current_color }};
    font-weight: {{ block.settings.current_font_weight }};
  }

  .ai-breadcrumbs-separator-{{ ai_gen_id }} {
    color: {{ block.settings.separator_color }};
    font-size: {{ block.settings.separator_size }}px;
    user-select: none;
  }

  @media screen and (max-width: 749px) {
    .ai-breadcrumbs-{{ ai_gen_id }} {
      font-size: {{ block.settings.font_size | times: 0.9 }}px;
    }
    
    .ai-breadcrumbs-list-{{ ai_gen_id }} {
      gap: {{ block.settings.spacing | times: 0.8 }}px;
    }
    
    .ai-breadcrumbs-item-{{ ai_gen_id }} {
      gap: {{ block.settings.spacing | times: 0.8 }}px;
    }
  }
{% endstyle %}

<product-breadcrumbs-{{ ai_gen_id }}
  class="ai-breadcrumbs-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <nav aria-label="Breadcrumb navigation">
    <ol class="ai-breadcrumbs-list-{{ ai_gen_id }}">
      <li class="ai-breadcrumbs-item-{{ ai_gen_id }}">
        <a href="{{ routes.root_url }}" class="ai-breadcrumbs-link-{{ ai_gen_id }}">
          {{ block.settings.home_text }}
        </a>
      </li>

      {% liquid
        assign collection_from_url = null
        assign collection_handle = request.headers['Referer'] | split: '/collections/' | last | split: '/' | first | split: '?' | first
        
        if collection_handle != blank and collections[collection_handle]
          assign collection_from_url = collections[collection_handle]
        endif
        
        assign breadcrumb_collection = collection_from_url
        if breadcrumb_collection == null and product.collections.size > 0
          assign breadcrumb_collection = product.collections.first
        endif
      %}

      {% if breadcrumb_collection %}
        <li class="ai-breadcrumbs-item-{{ ai_gen_id }}">
          <span class="ai-breadcrumbs-separator-{{ ai_gen_id }}" aria-hidden="true">
            {{ block.settings.separator }}
          </span>
          <a href="{{ breadcrumb_collection.url }}" class="ai-breadcrumbs-link-{{ ai_gen_id }}">
            {{ breadcrumb_collection.title }}
          </a>
        </li>
      {% endif %}

      <li class="ai-breadcrumbs-item-{{ ai_gen_id }}">
        <span class="ai-breadcrumbs-separator-{{ ai_gen_id }}" aria-hidden="true">
          {{ block.settings.separator }}
        </span>
        <span class="ai-breadcrumbs-current-{{ ai_gen_id }}" aria-current="page">
          {{ product.title }}
        </span>
      </li>
    </ol>
  </nav>
</product-breadcrumbs-{{ ai_gen_id }}>

<script>
  (function() {
    class ProductBreadcrumbs{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.enhanceBreadcrumbs();
      }

      enhanceBreadcrumbs() {
        const sessionStorageKey = 'shopify_breadcrumb_collection';
        const currentUrl = window.location.href;
        const referrer = document.referrer;
        
        if (referrer && referrer.includes('/collections/')) {
          const collectionMatch = referrer.match(/\/collections\/([^\/\?]+)/);
          if (collectionMatch) {
            const collectionHandle = collectionMatch[1];
            sessionStorage.setItem(sessionStorageKey, collectionHandle);
            this.updateBreadcrumbFromStorage(collectionHandle);
          }
        } else {
          const storedCollection = sessionStorage.getItem(sessionStorageKey);
          if (storedCollection) {
            this.updateBreadcrumbFromStorage(storedCollection);
          }
        }
      }

      updateBreadcrumbFromStorage(collectionHandle) {
        const existingCollectionLink = this.querySelector('.ai-breadcrumbs-link-{{ ai_gen_id }}[href*="/collections/"]');
        
        if (existingCollectionLink && !existingCollectionLink.href.includes(collectionHandle)) {
          fetch(`/collections/${collectionHandle}.json`)
            .then(response => response.json())
            .then(data => {
              if (data.collection) {
                existingCollectionLink.href = `/collections/${collectionHandle}`;
                existingCollectionLink.textContent = data.collection.title;
              }
            })
            .catch(() => {
              console.log('Could not fetch collection data');
            });
        }
      }
    }

    customElements.define('product-breadcrumbs-{{ ai_gen_id }}', ProductBreadcrumbs{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Product breadcrumbs",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "home_text",
      "label": "Home text",
      "default": "Home"
    },
    {
      "type": "text",
      "id": "separator",
      "label": "Separator",
      "default": "/"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "font_size",
      "min": 10,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Font size",
      "default": 14
    },
    {
      "type": "range",
      "id": "spacing",
      "min": 4,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Item spacing",
      "default": 8
    },
    {
      "type": "range",
      "id": "separator_size",
      "min": 8,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Separator size",
      "default": 14
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 60,
      "step": 4,
      "unit": "px",
      "label": "Top padding",
      "default": 16
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 60,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 16
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "link_color",
      "label": "Link color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "link_hover_color",
      "label": "Link hover color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "current_color",
      "label": "Current page color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "separator_color",
      "label": "Separator color",
      "default": "#cccccc"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "select",
      "id": "current_font_weight",
      "label": "Current page font weight",
      "options": [
        {
          "value": "400",
          "label": "Normal"
        },
        {
          "value": "500",
          "label": "Medium"
        },
        {
          "value": "600",
          "label": "Semibold"
        },
        {
          "value": "700",
          "label": "Bold"
        }
      ],
      "default": "500"
    }
  ],
  "presets": [
    {
      "name": "Product breadcrumbs"
    }
  ]
}
{% endschema %}