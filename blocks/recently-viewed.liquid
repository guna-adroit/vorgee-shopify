{% doc %}
  @prompt
    Functionality requirements:
    Use localStorage to track recently viewed product handles or IDs on the storefront.
    
    
    
    The block should retrieve these product handles and query them using Shopifyâ€™s all_products object or an AJAX call.
    Limit the slider to show a maximum of 10 recently viewed products.
    A SLIDER SHOULD BE IMPLEMENTED for horizontal sliding behaviour and it need to have gesture controls. USE OF SWIPER SLIDER IS PREFFERED. It needs to be extremely smooth and responsive
    
    The product card should be strictly having the dimension of the "Product card" from the Collection. Also include the exact swatch circle and hover behaviour. THE SIZE SHOULD NOT BE SCALED
    
    
    
    Layout and styling fixes:
    The slider should behave like a proper responsive Swiper instance:
    On desktop, show 4 products per view, and on mobile, show 2 products per view.
    
    
    
    Fix the following UI issues:
    On desktop, the products are currently listed side-by-side and overflowing the page. Fix this so they are contained within a Swiper slider and the page does not scroll horizontally.
    
    
    
    On mobile, the swipe/drag gesture should  work. Enable proper touch interaction using Swiper.js. On desktop, enable mouse drag/swipe as well as navigation arrows.
    
    
    
    Ensure the .swiper-wrapper and .swiper-slide are correctly structured and styled to prevent overflow or layout breaking.
    
    
    
    Wrap the section in a container with overflow-x: hidden to prevent horizontal scroll on the overall page layout.
    
    
    
    Additional requirements:
    
    
    
    Include basic product information: product image, title, price, and link.
    
    
    Only show the slider if at least 1 recently viewed product is available.
    This slider is rendered on the collection (PLP) page, so make sure tracking logic is in place when the user views a product

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-recently-viewed-{{ ai_gen_id }} {
    width: 100%;
    overflow-x: hidden;
    padding: 20px 0;
  }

  .ai-recently-viewed-container-{{ ai_gen_id }} {
    {% comment %} max-width: 1200px; {% endcomment %}
    margin: 0 auto;
    {% comment %} padding: 0 20px; {% endcomment %}
  }

  .ai-recently-viewed-header-{{ ai_gen_id }} {
    margin-bottom: 18px;
  }

  .ai-recently-viewed-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.heading_color }};
    margin: 0;
    text-align: {{ block.settings.heading_alignment }};
  }

  .ai-recently-viewed-swiper-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
    margin: 0 -10px;
  }

  .ai-recently-viewed-swiper-{{ ai_gen_id }} .swiper-wrapper {
    display: flex;
    align-items: stretch;
  }

  .ai-recently-viewed-swiper-{{ ai_gen_id }} .swiper-slide {
    height: auto;
    padding: 0 10px;
    box-sizing: border-box;
  }

  .ai-recently-viewed-card-{{ ai_gen_id }} {
    position: relative;
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    height: 100%;
    display: flex;
    flex-direction: column;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .ai-recently-viewed-card-{{ ai_gen_id }}:hover {
    /* transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15); */
  }

  .ai-recently-viewed-image-container-{{ ai_gen_id }} {
    background: {{ block.settings.card_background }};
    border: 1px solid {{ block.settings.card_border_color }};
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    overflow: hidden;
  }

  .ai-recently-viewed-image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .ai-recently-viewed-card-{{ ai_gen_id }}:hover .ai-recently-viewed-image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .ai-recently-viewed-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-recently-viewed-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.5;
  }

  .ai-recently-viewed-content-{{ ai_gen_id }} {
    padding: 16px;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }

  .ai-recently-viewed-product-title-{{ ai_gen_id }} {
    font-size: 18px;
    font-weight: 100;
    color: {{ block.settings.text_color }};
    margin: 0 0 4px;
    line-height: 28px;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .ai-recently-viewed-price-{{ ai_gen_id }} {
    font-size: 14px;
    line-height:28px;
    font-weight: 500;
    color: {{ block.settings.price_color }};
    margin-top: 8px;
  }

  .ai-recently-viewed-variants-{{ ai_gen_id }} {
    display: flex;
    gap: 6px;
    margin-top: 8px;
    flex-wrap: wrap;
  }

  .ai-recently-viewed-swatch-{{ ai_gen_id }} {
    width: 18px;
    height: 18px;
    border-radius: 50%;
    border: 2px solid #fff;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .ai-recently-viewed-swatch-{{ ai_gen_id }}:hover {
    transform: scale(1.1);
  }

  .ai-recently-viewed-nav-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 10;
    background: {{ block.settings.nav_background }};
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .ai-recently-viewed-nav-{{ ai_gen_id }}:hover {
    background: {{ block.settings.nav_hover_background }};
    transform: translateY(-50%) scale(1.1);
  }

  .ai-recently-viewed-nav-{{ ai_gen_id }}:disabled {
    opacity: 0.3;
    cursor: not-allowed;
    transform: translateY(-50%) scale(1);
  }

  .ai-recently-viewed-nav-prev-{{ ai_gen_id }} {
    left: -20px;
  }

  .ai-recently-viewed-nav-next-{{ ai_gen_id }} {
    right: -20px;
  }

  .ai-recently-viewed-nav-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
    fill: {{ block.settings.nav_icon_color }};
  }

  .ai-recently-viewed-empty-{{ ai_gen_id }} {
    display: none;
    text-align: center;
    padding: 40px 20px;
    color: {{ block.settings.text_color }};
  }
  div[class*="ai-recently-viewed-container"] .swiper-button-next:after, div[class*="ai-recently-viewed-container"] .swiper-button-prev:after {
    font-size: 16px;
    color: #07BED4;
  }
  div[class*="ai-recently-viewed-container"] .swiper-button-next, div[class*="ai-recently-viewed-container"] .swiper-button-prev {
    width: 46px;
    height: 46px;
  }
  @media screen and (max-width: 749px) {
    .ai-recently-viewed-container-{{ ai_gen_id }} {
      {% comment %} padding: 0 15px; {% endcomment %}
    }

    .ai-recently-viewed-swiper-{{ ai_gen_id }} {
      margin: 0 -5px;
    }

    .ai-recently-viewed-swiper-{{ ai_gen_id }} .swiper-slide {
      padding: 0 5px;
    }

    .ai-recently-viewed-nav-{{ ai_gen_id }} {
      display: none;
    }

    .ai-recently-viewed-content-{{ ai_gen_id }} {
      padding: 12px;
    }

    .ai-recently-viewed-product-title-{{ ai_gen_id }} {
      font-size: 14px;
      line-height: 22px;
    }

    .ai-recently-viewed-price-{{ ai_gen_id }} {
      font-size: 14px;
    }
    div[class*="ai-recently-viewed-container"] .swiper-button-next, div[class*="ai-recently-viewed-container"] .swiper-button-prev {
      width: 28px;
      height: 28px;
    }
    div[class*="ai-recently-viewed-container"] .swiper-button-next:after, div[class*="ai-recently-viewed-container"] .swiper-button-prev:after {
      font-size: 10px;
      color: #07BED4;
    }
    .ai-recently-viewed-swatch-{{ ai_gen_id }} {
      width: 14px;
      height: 14px;
    }
  }
{% endstyle %}

<recently-viewed-products-{{ ai_gen_id }}
  class="ai-recently-viewed-{{ ai_gen_id }}"
  data-max-products="{{ block.settings.max_products }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-recently-viewed-container-{{ ai_gen_id }}">
    {% if block.settings.heading != blank %}
      <div class="ai-recently-viewed-header-{{ ai_gen_id }}">
        <h2 class="ai-recently-viewed-title-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
      </div>
    {% endif %}

    <div class="ai-recently-viewed-swiper-{{ ai_gen_id }} swiper">
      <div class="swiper-wrapper">
      </div>

      <button class="ai-recently-viewed-nav-{{ ai_gen_id }} ai-recently-viewed-nav-prev-{{ ai_gen_id }} swiper-button-prev" aria-label="Previous products">
      </button>

      <button class="ai-recently-viewed-nav-{{ ai_gen_id }} ai-recently-viewed-nav-next-{{ ai_gen_id }} swiper-button-next" aria-label="Next products">
      </button>
    </div>

    <div class="ai-recently-viewed-empty-{{ ai_gen_id }}">
      <p>{{ block.settings.empty_message }}</p>
    </div>
  </div>
</recently-viewed-products-{{ ai_gen_id }}>

<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">

<script>
  (function() {
    class RecentlyViewedProducts{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.maxProducts = parseInt(this.dataset.maxProducts) || 10;
        this.storageKey = 'recently_viewed_products';
        this.swiper = null;
      }

      connectedCallback() {
        this.trackCurrentProduct();
        this.loadRecentlyViewed();
      }

      trackCurrentProduct() {
        if (window.location.pathname.includes('/products/')) {
          const productHandle = window.location.pathname.split('/products/')[1].split('?')[0];
          if (productHandle) {
            this.addToRecentlyViewed(productHandle);
          }
        }
      }

      addToRecentlyViewed(productHandle) {
        let recentlyViewed = JSON.parse(localStorage.getItem(this.storageKey) || '[]');
        
        recentlyViewed = recentlyViewed.filter(handle => handle !== productHandle);
        recentlyViewed.unshift(productHandle);
        recentlyViewed = recentlyViewed.slice(0, this.maxProducts);
        
        localStorage.setItem(this.storageKey, JSON.stringify(recentlyViewed));
      }

      async loadRecentlyViewed() {
        const recentlyViewed = JSON.parse(localStorage.getItem(this.storageKey) || '[]');
        
        if (recentlyViewed.length === 0) {
          this.showEmptyState();
          return;
        }

        const currentProductHandle = window.location.pathname.includes('/products/') 
          ? window.location.pathname.split('/products/')[1].split('?')[0] 
          : null;

        const filteredHandles = recentlyViewed.filter(handle => handle !== currentProductHandle);

        if (filteredHandles.length === 0) {
          this.showEmptyState();
          return;
        }

        try {
          const products = await this.fetchProducts(filteredHandles);
          this.renderProducts(products);
          this.initSwiper();
        } catch (error) {
          console.error('Error loading recently viewed products:', error);
          this.showEmptyState();
        }
      }

      async fetchProducts(handles) {
        const products = [];
        
        for (const handle of handles) {
          try {
            const response = await fetch(`/products/${handle}.js`);
            if (response.ok) {
              const product = await response.json();
              products.push(product);
            }
          } catch (error) {
            console.error(`Error fetching product ${handle}:`, error);
          }
        }
        
        return products;
      }

      renderProducts(products) {
        const wrapper = this.querySelector('.swiper-wrapper');
        wrapper.innerHTML = '';

        products.forEach(product => {
          const slide = this.createProductSlide(product);
          wrapper.appendChild(slide);
        });

        this.style.display = 'block';
      }

      createProductSlide(product) {
        const slide = document.createElement('div');
        slide.className = 'swiper-slide';

        const featuredImage = product.featured_image;
        const imageHtml = featuredImage 
          ? `<img src="${featuredImage}" alt="${product.title}" class="ai-recently-viewed-image-{{ ai_gen_id }}" loading="lazy">`
          : `<div class="ai-recently-viewed-placeholder-{{ ai_gen_id }}">${this.getPlaceholderSvg()}</div>`;

        const colorOptions = product.options.find(option => 
          option.name.toLowerCase().includes('color') || 
          option.name.toLowerCase().includes('colour')
        );
        console.log("Product Object:",product)
        let badgeHtml = '';
        if (product.compare_at_price) {
          badgeHtml = `<span class="badge product-badges__badge--rectangle product-badges__badge ai-recently-viewed-badge-{{ ai_gen_id }}">SALE</span>`;
        } else {
          badgeHtml = '';
        }
        let swatchesHtml = '';
        if (colorOptions && colorOptions.values.length > 1) {
          const swatches = colorOptions.values.slice(0, 5).map(color => {
            const colorValue = this.getColorValue(color);
            return `<div class="ai-recently-viewed-swatch-{{ ai_gen_id }}" style="background-color: ${colorValue};" title="${color}"></div>`;
          }).join('');
          swatchesHtml = `<div class="ai-recently-viewed-variants-{{ ai_gen_id }}">${swatches}</div>`;
        }

        slide.innerHTML = `
          <a href="/products/${product.handle}" class="ai-recently-viewed-card-{{ ai_gen_id }}">
            <div class="ai-recently-viewed-image-container-{{ ai_gen_id }}">
              ${imageHtml}
              ${badgeHtml}
            </div>
            <div class="ai-recently-viewed-content-{{ ai_gen_id }}">
              <h3 class="ai-recently-viewed-product-title-{{ ai_gen_id }}">${product.title}</h3>
              ${swatchesHtml}
              <div class="ai-recently-viewed-price-{{ ai_gen_id }}">${this.formatPrice(product.price)}</div>
            </div>
          </a>
        `;

        return slide;
      }

      getColorValue(colorName) {
        const colorMap = {
          'red': '#FF0000', 'blue': '#0000FF', 'green': '#008000', 'yellow': '#FFFF00',
          'orange': '#FFA500', 'purple': '#800080', 'pink': '#FFC0CB', 'brown': '#A52A2A',
          'black': '#000000', 'white': '#FFFFFF', 'gray': '#808080', 'grey': '#808080',
          'navy': '#000080', 'beige': '#F5F5DC', 'tan': '#D2B48C', 'olive': '#808000'
        };
        
        const lowerColor = colorName.toLowerCase();
        return colorMap[lowerColor] || '#CCCCCC';
      }

      formatPrice(priceInCents) {
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD'
        }).format(priceInCents / 100);
      }

      getPlaceholderSvg() {
        return `<svg viewBox="0 0 525 525" xmlns="http://www.w3.org/2000/svg">
          <rect fill="#f4f4f4" width="100%" height="100%"/>
          <rect fill="#e0e0e0" x="50" y="50" width="425" height="425"/>
          <circle fill="#cccccc" cx="262.5" cy="210" r="50"/>
          <rect fill="#cccccc" x="162.5" y="280" width="200" height="20" rx="10"/>
          <rect fill="#cccccc" x="187.5" y="320" width="150" height="15" rx="7.5"/>
        </svg>`;
      }

      initSwiper() {
        if (this.swiper) {
          this.swiper.destroy(true, true);
        }

        const swiperElement = this.querySelector('.swiper');
        
        this.swiper = new Swiper(swiperElement, {
          slidesPerView: 2,
          spaceBetween: 0,
          grabCursor: true,
          navigation: {
            nextEl: '.ai-recently-viewed-nav-next-{{ ai_gen_id }}',
            prevEl: '.ai-recently-viewed-nav-prev-{{ ai_gen_id }}',
          },
          breakpoints: {
            750: {
              slidesPerView: 4.25,
              spaceBetween: 0,
            }
          },
          on: {
            init: function() {
              this.update();
            }
          }
        });
      }

      showEmptyState() {
        this.querySelector('.ai-recently-viewed-swiper-{{ ai_gen_id }}').style.display = 'none';
        this.querySelector('.ai-recently-viewed-empty-{{ ai_gen_id }}').style.display = 'block';
      }
    }

    customElements.define('recently-viewed-products-{{ ai_gen_id }}', RecentlyViewedProducts{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Recently Viewed Products",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Recently Viewed"
    },
    {
      "type": "select",
      "id": "heading_alignment",
      "label": "Heading alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "left"
    },
    {
      "type": "text",
      "id": "empty_message",
      "label": "Empty state message",
      "default": "No recently viewed products"
    },
    {
      "type": "range",
      "id": "max_products",
      "min": 1,
      "max": 10,
      "step": 1,
      "label": "Maximum products to track",
      "default": 8
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 24
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card background",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "card_border_color",
      "label": "Card border color",
      "default": "#E6E6E6"
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "color",
      "id": "nav_background",
      "label": "Navigation background",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "nav_hover_background",
      "label": "Navigation hover background",
      "default": "#F5F5F5"
    },
    {
      "type": "color",
      "id": "nav_icon_color",
      "label": "Navigation icon color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 8
    }
  ],
  "presets": [
    {
      "name": "Recently Viewed Products"
    }
  ]
}
{% endschema %}