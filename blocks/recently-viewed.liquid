{% doc %}
  @prompt
    Create a new section or block in the Horizon theme named "Recently viewed". It should be a responsive horizontal slider that displays a list of products recently viewed by the current user.
    
    Functionality requirements:
    - Use localStorage to track recently viewed product handles or IDs on the storefront.
    - The block should retrieve these product handles and query them using Shopifyâ€™s `all_products` object or an AJAX call.
    - Limit the slider to show a maximum of 10 recently viewed products.
    - Use a swiper.js (or similar) implementation for horizontal sliding behavior.
    - Include basic product information: product image, title, price, and link.
    - Please use the existing product card styling with swatch circles if present. 
    - Make sure it supports both mobile and desktop views.
    - Only show the slider if there is at least 1 recently viewed products.
    - Compatible with Online Store 2.0 block system and editable from the theme customizer.
    
    Use clean, semantic Liquid and JavaScript. Ensure the section has a `schema` for configurability.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-recently-viewed-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding }}px 0;
    background-color: {{ block.settings.background_color }};
  }

  .ai-recently-viewed-container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-recently-viewed-header-{{ ai_gen_id }} {
    margin-bottom: 32px;
    text-align: {{ block.settings.heading_alignment }};
  }

  .ai-recently-viewed-title-{{ ai_gen_id }} {
    color: {{ block.settings.heading_color }};
    font-size: {{ block.settings.heading_size }}px;
    margin: 0;}

  .ai-recently-viewed-slider-wrapper-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
  }

  .ai-recently-viewed-slider-{{ ai_gen_id }} {
    display: flex;
    gap: 20px;
    transition: transform 0.3s ease;
    will-change: transform;
  }

  .ai-recently-viewed-slide-{{ ai_gen_id }} {
    flex: 0 0 auto;
    width: calc((100% - 60px) / 4);
    min-width: 250px;
  }

  .ai-recently-viewed-product-card-{{ ai_gen_id }} {
    background: {{ block.settings.card_background }};
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .ai-recently-viewed-product-card-{{ ai_gen_id }}:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }

  .ai-recently-viewed-product-image-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    overflow: hidden;
  }

  .ai-recently-viewed-product-image-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .ai-recently-viewed-product-card-{{ ai_gen_id }}:hover .ai-recently-viewed-product-image-{{ ai_gen_id }} img {
    transform: scale(1.05);
  }

  .ai-recently-viewed-product-info-{{ ai_gen_id }} {
    padding: 16px;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }

  .ai-recently-viewed-product-title-{{ ai_gen_id }} {
    color: {{ block.settings.text_color }};
    font-size: 16px;
    font-weight: 500;
    margin: 0 0 8px;
    line-height: 1.3;
    text-decoration: none;
  }

  .ai-recently-viewed-product-title-{{ ai_gen_id }}:hover {
    color: {{ block.settings.link_hover_color }};
  }

  .ai-recently-viewed-product-price-{{ ai_gen_id }} {
    color: {{ block.settings.price_color }};
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 12px;
  }

  .ai-recently-viewed-swatches-{{ ai_gen_id }} {
    display: flex;
    gap: 6px;
    flex-wrap: wrap;
    margin-top: auto;
  }

  .ai-recently-viewed-swatch-{{ ai_gen_id }} {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 2px solid #fff;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .ai-recently-viewed-swatch-{{ ai_gen_id }}:hover {
    transform: scale(1.1);
  }

  .ai-recently-viewed-nav-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: {{ block.settings.nav_button_color }};
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
    transition: background-color 0.3s ease, opacity 0.3s ease;
    opacity: 0.8;
  }

  .ai-recently-viewed-nav-{{ ai_gen_id }}:hover {
    opacity: 1;
    background: {{ block.settings.nav_button_hover_color }};
  }

  .ai-recently-viewed-nav-{{ ai_gen_id }}:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .ai-recently-viewed-nav-prev-{{ ai_gen_id }} {
    left: -20px;
  }

  .ai-recently-viewed-nav-next-{{ ai_gen_id }} {
    right: -20px;
  }

  .ai-recently-viewed-nav-{{ ai_gen_id }} svg {
    width: 16px;
    height: 16px;
    fill: {{ block.settings.nav_icon_color }};
  }

  .ai-recently-viewed-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f5f5f5;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-recently-viewed-placeholder-{{ ai_gen_id }} svg {
    width: 60px;
    height: 60px;
    opacity: 0.3;
  }

  @media screen and (max-width: 1024px) {
    .ai-recently-viewed-slide-{{ ai_gen_id }} {
      width: calc((100% - 40px) / 3);
    }
  }

  @media screen and (max-width: 768px) {
    .ai-recently-viewed-slide-{{ ai_gen_id }} {
      width: calc((100% - 20px) / 2);
      min-width: 160px;
    }

    .ai-recently-viewed-container-{{ ai_gen_id }} {
      padding: 0 16px;
    }

    .ai-recently-viewed-nav-{{ ai_gen_id }} {
      display: none;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-recently-viewed-slide-{{ ai_gen_id }} {
      width: calc(100% - 20px);
      min-width: 200px;
    }
  }
{% endstyle %}

<recently-viewed-products-{{ ai_gen_id }}
  class="ai-recently-viewed-{{ ai_gen_id }}"
  data-max-products="{{ block.settings.max_products }}"
  data-show-swatches="{{ block.settings.show_swatches }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-recently-viewed-container-{{ ai_gen_id }}">
    <div class="ai-recently-viewed-header-{{ ai_gen_id }}">
      <h2 class="ai-recently-viewed-title-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
    </div>

    <div class="ai-recently-viewed-slider-wrapper-{{ ai_gen_id }}">
      <button
        class="ai-recently-viewed-nav-{{ ai_gen_id }} ai-recently-viewed-nav-prev-{{ ai_gen_id }}"
        aria-label="Previous products"
        disabled
      >
        <svg viewBox="0 0 24 24">
          <path d="M15 18l-6-6 6-6"/>
        </svg>
      </button>

      <div class="ai-recently-viewed-slider-{{ ai_gen_id }}">
      </div>

      <button
        class="ai-recently-viewed-nav-{{ ai_gen_id }} ai-recently-viewed-nav-next-{{ ai_gen_id }}"
        aria-label="Next products"
      >
        <svg viewBox="0 0 24 24">
          <path d="M9 18l6-6-6-6"/>
        </svg>
      </button>
    </div>
  </div>
</recently-viewed-products-{{ ai_gen_id }}>

<script>
  (function() {
    class RecentlyViewedProducts{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.maxProducts = parseInt(this.dataset.maxProducts) || 10;
        this.showSwatches = this.dataset.showSwatches === 'true';
        this.currentIndex = 0;
        this.slideWidth = 0;
        this.visibleSlides = 4;
      }

      connectedCallback() {
        this.slider = this.querySelector('.ai-recently-viewed-slider-{{ ai_gen_id }}');
        this.prevBtn = this.querySelector('.ai-recently-viewed-nav-prev-{{ ai_gen_id }}');
        this.nextBtn = this.querySelector('.ai-recently-viewed-nav-next-{{ ai_gen_id }}');

        this.setupEventListeners();
        this.loadRecentlyViewed();
        this.trackCurrentProduct();
      }

      setupEventListeners() {
        this.prevBtn.addEventListener('click', () => this.slidePrev());
        this.nextBtn.addEventListener('click', () => this.slideNext());
        
        window.addEventListener('resize', () => this.updateSlideWidth());
      }

      trackCurrentProduct() {
        if (window.location.pathname.includes('/products/')) {
          const productHandle = window.location.pathname.split('/products/')[1].split('?')[0];
          this.addToRecentlyViewed(productHandle);
        }
      }

      addToRecentlyViewed(productHandle) {
        let recentlyViewed = JSON.parse(localStorage.getItem('recentlyViewed') || '[]');
        
        recentlyViewed = recentlyViewed.filter(handle => handle !== productHandle);
        recentlyViewed.unshift(productHandle);
        recentlyViewed = recentlyViewed.slice(0, this.maxProducts);
        
        localStorage.setItem('recentlyViewed', JSON.stringify(recentlyViewed));
      }

      async loadRecentlyViewed() {
        const recentlyViewed = JSON.parse(localStorage.getItem('recentlyViewed') || '[]');
        
        if (recentlyViewed.length === 0) {
          this.style.display = 'none';
          return;
        }

        const currentProductHandle = window.location.pathname.includes('/products/') 
          ? window.location.pathname.split('/products/')[1].split('?')[0] 
          : null;

        const filteredProducts = recentlyViewed.filter(handle => handle !== currentProductHandle);

        if (filteredProducts.length === 0) {
          this.style.display = 'none';
          return;
        }

        try {
          const products = await this.fetchProducts(filteredProducts);
          this.renderProducts(products);
          this.updateSlideWidth();
          this.updateNavigation();
        } catch (error) {
          console.error('Failed to load recently viewed products:', error);
          this.style.display = 'none';
        }
      }

      async fetchProducts(handles) {
        const promises = handles.map(handle => 
          fetch(`/products/${handle}.js`)
            .then(response => response.ok ? response.json() : null)
            .catch(() => null)
        );

        const results = await Promise.all(promises);
        return results.filter(product => product !== null);
      }

      renderProducts(products) {
        this.slider.innerHTML = products.map(product => this.createProductCard(product)).join('');
      }

      createProductCard(product) {
        const featuredImage = product.featured_image || product.images[0];
        const imageUrl = featuredImage ? featuredImage.replace('.jpg', '_300x300.jpg').replace('.png', '_300x300.png') : '';
        
        const swatchesHtml = this.showSwatches && product.options ? this.createSwatches(product) : '';

        return `
          <div class="ai-recently-viewed-slide-{{ ai_gen_id }}">
            <div class="ai-recently-viewed-product-card-{{ ai_gen_id }}">
              <div class="ai-recently-viewed-product-image-{{ ai_gen_id }}">
                ${imageUrl ? 
                  `<img src="${imageUrl}" alt="${product.title}" loading="lazy" width="300" height="300">` :
                  `<div class="ai-recently-viewed-placeholder-{{ ai_gen_id }}">${'{{ "image" | placeholder_svg_tag }}'}</div>`
                }
              </div>
              <div class="ai-recently-viewed-product-info-{{ ai_gen_id }}">
                <a href="/products/${product.handle}" class="ai-recently-viewed-product-title-{{ ai_gen_id }}">
                  ${product.title}
                </a>
                <div class="ai-recently-viewed-product-price-{{ ai_gen_id }}">
                  ${this.formatPrice(product.price)}
                </div>
                ${swatchesHtml}
              </div>
            </div>
          </div>
        `;
      }

      createSwatches(product) {
        const colorOption = product.options.find(option => 
          option.name.toLowerCase().includes('color') || 
          option.name.toLowerCase().includes('colour')
        );

        if (!colorOption || !colorOption.values) return '';

        const swatches = colorOption.values.slice(0, 5).map(color => {
          const colorValue = this.getColorValue(color);
          return `<div class="ai-recently-viewed-swatch-{{ ai_gen_id }}" style="background-color: ${colorValue};" title="${color}"></div>`;
        }).join('');

        return `<div class="ai-recently-viewed-swatches-{{ ai_gen_id }}">${swatches}</div>`;
      }

      getColorValue(colorName) {
        const colorMap = {
          'black': '#000000',
          'white': '#ffffff',
          'red': '#ff0000',
          'blue': '#0000ff',
          'green': '#008000',
          'yellow': '#ffff00',
          'pink': '#ffc0cb',
          'purple': '#800080',
          'orange': '#ffa500',
          'brown': '#a52a2a',
          'grey': '#808080',
          'gray': '#808080',
          'navy': '#000080',
          'beige': '#f5f5dc'
        };

        const normalizedColor = colorName.toLowerCase().trim();
        return colorMap[normalizedColor] || '#cccccc';
      }

      formatPrice(priceInCents) {
        const price = priceInCents / 100;
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD'
        }).format(price);
      }

      updateSlideWidth() {
        const containerWidth = this.slider.parentElement.offsetWidth;
        const gap = 20;
        if (window.innerWidth <= 480) {
          this.visibleSlides = 1;
        } else if (window.innerWidth <= 768) {
          this.visibleSlides = 2;
        } else if (window.innerWidth <= 1024) {
          this.visibleSlides = 3;
        } else {
          this.visibleSlides = 4;
        }

        this.slideWidth = (containerWidth - (gap * (this.visibleSlides - 1))) / this.visibleSlides;
        
        const slides = this.slider.querySelectorAll('.ai-recently-viewed-slide-{{ ai_gen_id }}');
        slides.forEach(slide => {
          slide.style.width = `${this.slideWidth}px`;
        });
      }

      slidePrev() {
        if (this.currentIndex > 0) {
          this.currentIndex--;
          this.updateSliderPosition();
          this.updateNavigation();
        }
      }

      slideNext() {
        const totalSlides = this.slider.children.length;
        const maxIndex = Math.max(0, totalSlides - this.visibleSlides);
        if (this.currentIndex < maxIndex) {
          this.currentIndex++;
          this.updateSliderPosition();
          this.updateNavigation();
        }
      }

      updateSliderPosition() {
        const translateX = -(this.currentIndex * (this.slideWidth +20));
        this.slider.style.transform = `translateX(${translateX}px)`;
      }

      updateNavigation() {
        const totalSlides = this.slider.children.length;
        const maxIndex = Math.max(0, totalSlides - this.visibleSlides);
        
        this.prevBtn.disabled = this.currentIndex === 0;
        this.nextBtn.disabled = this.currentIndex >= maxIndex || totalSlides <= this.visibleSlides;
      }
    }

    customElements.define('recently-viewed-products-{{ ai_gen_id }}', RecentlyViewedProducts{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Recently Viewed Products",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Recently Viewed"
    },
    {
      "type": "range",
      "id": "max_products",
      "min": 4,
      "max": 20,
      "step": 1,
      "label": "Maximum products to track",
      "default": 10
    },
    {
      "type": "checkbox",
      "id": "show_swatches",
      "label": "Show color swatches",
      "default": true
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "heading_alignment",
      "label": "Heading alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "left"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "link_hover_color",
      "label": "Link hover color",
      "default": "#000f9f"
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Navigation button color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Navigation button hover color",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "nav_icon_color",
      "label": "Navigation icon color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 32
    }
  ],
  "presets": [
    {
      "name": "Recently Viewed Products"
    }
  ]
}
{% endschema %}